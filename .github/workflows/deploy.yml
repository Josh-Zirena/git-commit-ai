name: Deploy Frontend to S3 and Backend to ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: git-commit-ai
  ECS_CLUSTER: git-commit-ai
  ECS_SERVICE: git-commit-ai

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install backend dependencies (including dev tools)
      run: |
        cd backend
        echo "Installing backend dependencies..."
        NODE_ENV=development npm ci
        echo "Checking Jest installation..."
        ls node_modules/.bin/jest || echo "Jest not found in node_modules/.bin/"
    
    - name: Install frontend dependencies
      run: cd frontend && NODE_ENV=development npm ci
    
    - name: Run backend tests
      run: cd backend && npm test
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run frontend linting
      run: cd frontend && npm run lint
    
    - name: Test backend Docker build
      run: docker build -f Dockerfile.backend -t git-commit-ai-backend:test .

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
    
    - name: Build frontend
      run: cd frontend && npm run build
      env:
        VITE_API_URL: https://${{ secrets.CLOUDFRONT_DOMAIN_NAME }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      run: |
        # Sync built frontend to S3 bucket
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_FRONTEND_BUCKET }} --delete
        
        # Set proper content types and cache headers
        aws s3 cp s3://${{ secrets.S3_FRONTEND_BUCKET }} s3://${{ secrets.S3_FRONTEND_BUCKET }} --recursive \
          --exclude "*" \
          --include "*.html" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=0, must-revalidate" \
          --content-type "text/html"
        
        aws s3 cp s3://${{ secrets.S3_FRONTEND_BUCKET }} s3://${{ secrets.S3_FRONTEND_BUCKET }} --recursive \
          --exclude "*" \
          --include "*.js" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=31536000, immutable" \
          --content-type "application/javascript"
        
        aws s3 cp s3://${{ secrets.S3_FRONTEND_BUCKET }} s3://${{ secrets.S3_FRONTEND_BUCKET }} --recursive \
          --exclude "*" \
          --include "*.css" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=31536000, immutable" \
          --content-type "text/css"
    
    - name: Invalidate CloudFront cache
      run: |
        # Create CloudFront invalidation for updated content
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push backend image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image (backend only)
        docker build -f Dockerfile.backend -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -f Dockerfile.backend -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push both tagged and latest images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to Amazon ECS
      run: |
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition $ECS_SERVICE \
          --query 'taskDefinition' \
          --output json)
        
        # Update image and environment variables in task definition
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" --arg FRONTEND_URL "https://${{ secrets.CLOUDFRONT_DOMAIN_NAME }}" \
          '.containerDefinitions[0].image = $IMAGE | 
           .containerDefinitions[0].environment = (.containerDefinitions[0].environment // []) + [
             {"name": "FRONTEND_URL", "value": $FRONTEND_URL}
           ] |
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')
        
        # Register new task definition
        echo $NEW_TASK_DEFINITION > /tmp/task-definition.json
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file:///tmp/task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $NEW_TASK_DEF_ARN
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE
        
        echo "âœ… Backend deployment completed successfully!"
        
        # Get service status
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].deployments[0].{Status:status,TaskDefinition:taskDefinition,DesiredCount:desiredCount,RunningCount:runningCount}' \
          --output table