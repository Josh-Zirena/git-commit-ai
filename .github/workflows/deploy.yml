name: Deploy to EC2 with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install backend dependencies (including dev tools)
      run: |
        cd backend
        echo "Installing backend dependencies with dev tools..."
        npm ci --include=dev
        echo "Checking if Jest is available..."
        ls node_modules/.bin/jest || echo "Jest not found in node_modules/.bin/"
        npm list jest || echo "Jest not in npm list"
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci --include=dev
    
    - name: Run backend tests
      run: |
        cd backend
        echo "Current directory: $(pwd)"
        echo "Node modules bin directory:"
        ls -la node_modules/.bin/ | grep jest || echo "No jest in .bin"
        echo "Running tests with npx..."
        npx jest
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run frontend linting
      run: cd frontend && npm run lint
    
    - name: Test Docker build
      run: docker build -t git-commit-ai:test .

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and save Docker image
      run: |
        docker build -t git-commit-ai:latest .
        docker save git-commit-ai:latest | gzip > git-commit-ai-image.tar.gz
    
    - name: Prepare deployment files
      run: |
        # Create deployment directory
        mkdir -p deploy
        
        # Copy Docker-related files
        cp docker-compose.yml deploy/
        cp -r nginx deploy/
        cp .env.example deploy/.env.example
        
        # Copy deployment scripts
        cp -r scripts deploy/
        
        # Create deployment script
        cat > deploy/deploy-docker.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting Docker deployment..."
        
        # Load Docker image
        docker load < git-commit-ai-image.tar.gz
        
        # Stop existing containers
        docker-compose down || true
        
        # Remove old images (keep last 2)
        docker images git-commit-ai --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | tail -n +3 | awk '{print $3}' | xargs -r docker rmi || true
        
        # Start new containers
        docker-compose up -d
        
        # Wait for health check
        echo "Waiting for application to be healthy..."
        for i in {1..30}; do
          if docker-compose ps | grep -q "healthy"; then
            echo "Application is healthy!"
            exit 0
          fi
          echo "Waiting... ($i/30)"
          sleep 10
        done
        
        echo "Health check failed, rolling back..."
        docker-compose logs
        exit 1
        EOF
        
        chmod +x deploy/deploy-docker.sh
    
    - name: Initial Server Setup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          set -e
          
          # Check if this is first-time setup
          if [ ! -f "/opt/git-commit-ai/.setup-complete" ]; then
            echo "First-time setup detected. Running initial server configuration..."
            
            # Update system
            sudo apt-get update
            sudo apt-get install -y curl wget git build-essential software-properties-common apt-transport-https ca-certificates gnupg lsb-release
            
            # Install Docker
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker ubuntu
              sudo systemctl enable docker
              sudo systemctl start docker
            fi
            
            # Install Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Install additional tools
            sudo apt-get install -y htop ncdu tree jq unzip zip bc
            
            # Create application directories
            sudo mkdir -p /opt/git-commit-ai
            sudo chown -R ubuntu:ubuntu /opt/git-commit-ai
            
            # Configure firewall
            sudo ufw --force reset
            sudo ufw default deny incoming
            sudo ufw default allow outgoing
            sudo ufw allow ssh
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw --force enable
            
            # Mark setup as complete
            touch /opt/git-commit-ai/.setup-complete
            echo "Initial server setup completed"
          else
            echo "Server already configured, skipping initial setup"
          fi
          
          # Ensure Docker is running and user has access
          sudo systemctl start docker
          
          # Prepare deployment directory
          sudo mkdir -p /opt/git-commit-ai
          sudo chown ubuntu:ubuntu /opt/git-commit-ai
          cd /opt/git-commit-ai
          
          # Set up environment variables
          cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          EOF
          
          echo "Docker deployment directory prepared"
    
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        source: "deploy/*,git-commit-ai-image.tar.gz"
        target: "/opt/git-commit-ai/"
    
    - name: Deploy with Docker
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          set -e
          
          cd /opt/git-commit-ai
          
          # Make deployment script executable
          chmod +x deploy-docker.sh
          
          # Run Docker deployment
          ./deploy-docker.sh
          
          echo "Docker deployment completed successfully!"