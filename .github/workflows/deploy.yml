name: Deploy Frontend to S3 and Backend to Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install backend dependencies (including dev tools)
      run: |
        cd backend
        echo "Installing backend dependencies..."
        NODE_ENV=development npm ci
        echo "Checking Jest installation..."
        ls node_modules/.bin/jest || echo "Jest not found in node_modules/.bin/"
    
    - name: Install frontend dependencies
      run: cd frontend && NODE_ENV=development npm ci
    
    - name: Run backend tests
      run: cd backend && npm test
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run frontend linting
      run: cd frontend && npm run lint
    

  check-frontend-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          frontend:
            - 'frontend/**'
            - 'package.json'
            - 'package-lock.json'
          backend:
            - 'backend/**'
            - 'package.json'
            - 'package-lock.json'

  deploy-frontend:
    needs: [test, check-frontend-changes]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.check-frontend-changes.outputs.frontend == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
    
    - name: Build frontend
      run: cd frontend && npm run build
      env:
        VITE_API_URL: https://${{ secrets.CLOUDFRONT_DOMAIN_NAME }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      run: |
        # Sync built frontend to S3 bucket
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_FRONTEND_BUCKET }} --delete
        
        # Set proper content types and cache headers
        aws s3 cp s3://${{ secrets.S3_FRONTEND_BUCKET }} s3://${{ secrets.S3_FRONTEND_BUCKET }} --recursive \
          --exclude "*" \
          --include "*.html" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=0, must-revalidate" \
          --content-type "text/html"
        
        aws s3 cp s3://${{ secrets.S3_FRONTEND_BUCKET }} s3://${{ secrets.S3_FRONTEND_BUCKET }} --recursive \
          --exclude "*" \
          --include "*.js" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=31536000, immutable" \
          --content-type "application/javascript"
        
        aws s3 cp s3://${{ secrets.S3_FRONTEND_BUCKET }} s3://${{ secrets.S3_FRONTEND_BUCKET }} --recursive \
          --exclude "*" \
          --include "*.css" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=31536000, immutable" \
          --content-type "text/css"
    
    - name: Invalidate CloudFront cache
      run: |
        # Create CloudFront invalidation for updated content
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"


  deploy-lambda:
    needs: [test, check-frontend-changes]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.check-frontend-changes.outputs.backend == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          backend/package-lock.json
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Build Lambda package
      run: |
        cd backend
        npm run build:lambda
        
        # Verify zip contents
        echo "Lambda package contents:"
        unzip -l ../backend-lambda.zip | head -20
    
    - name: Deploy Lambda function
      run: |
        # Update Lambda function code (zip file is in project root)
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME || 'git-commit-ai-backend-lambda' }} \
          --zip-file fileb://backend-lambda.zip
        
        # Wait for code update to complete before updating configuration
        aws lambda wait function-updated \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME || 'git-commit-ai-backend-lambda' }}
        
        # Update environment variables
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME || 'git-commit-ai-backend-lambda' }} \
          --environment "Variables={NODE_ENV=production}"
        
        # Wait for configuration update to complete
        aws lambda wait function-updated \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME || 'git-commit-ai-backend-lambda' }}
        
        echo "âœ… Lambda deployment completed successfully!"
        
        # Get function status
        aws lambda get-function \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME || 'git-commit-ai-backend-lambda' }} \
          --query 'Configuration.{FunctionName:FunctionName,Runtime:Runtime,State:State,LastModified:LastModified}' \
          --output table